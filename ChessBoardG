//https://youtu.be/MBP4OqJJNvs
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.List;
import javax.swing.ImageIcon;

public class ChessBoardG extends Board implements MouseListener{

    public boolean isUserPlayingWhite = true;

    JFrame frame;
    JButton squares[][] = new JButton[8][8]; // Array for chess board - 8x8

    ImageIcon BlackKing = new ImageIcon("E:\\Coding projects\\NEA\\ChessAI\\Pieces\\BK.png"); //Grabs image and displays as ImageIcon
    ImageIcon BlackQueen = new ImageIcon("E:\\Coding projects\\NEA\\ChessAI\\Pieces\\BQ.png");
    ImageIcon BlackPawn = new ImageIcon("E:\\Coding projects\\NEA\\ChessAI\\Pieces\\BP.png");
    ImageIcon BlackBishop = new ImageIcon("E:\\Coding projects\\NEA\\ChessAI\\Pieces\\BB.png");
    ImageIcon BlackRook = new ImageIcon("E:\\Coding projects\\NEA\\ChessAI\\Pieces\\BR.png");
    ImageIcon BlackKnight = new ImageIcon("E:\\Coding projects\\NEA\\ChessAI\\Pieces\\BN.png");


    ImageIcon WhiteKing = new ImageIcon("E:\\Coding projects\\NEA\\ChessAI\\Pieces\\WK.png");
    ImageIcon WhiteQueen = new ImageIcon("E:\\Coding projects\\NEA\\ChessAI\\Pieces\\WQ.png");
    ImageIcon WhitePawn = new ImageIcon("E:\\Coding projects\\NEA\\ChessAI\\Pieces\\WP.png");
    ImageIcon WhiteBishop = new ImageIcon("E:\\Coding projects\\NEA\\ChessAI\\Pieces\\WB.png");
    ImageIcon WhiteRook = new ImageIcon("E:\\Coding projects\\NEA\\ChessAI\\Pieces\\WR.png");
    ImageIcon WhiteKnight = new ImageIcon("E:\\Coding projects\\NEA\\ChessAI\\Pieces\\WN.png");



    public ChessBoardG() {
        frame = new JFrame("ChessAI"); //Title of the window
        frame.setSize(500, 500);
        frame.setLayout(new GridLayout(8, 8));

        for ( int cordX = 0; cordX < 8; cordX++) {
            for (int cordY = 0; cordY < 8; cordY++) {
                 squares[cordX][cordY] = new JButton(); //for loops used to create chess board
                squares[cordX][cordY].addMouseListener(this);

                if ((cordX + cordY) % 2 == 0) {
                    squares[cordX][cordY].setBackground(Color.WHITE); //Displays white tiles

                } else {
                    squares[cordX][cordY].setBackground(Color.DARK_GRAY); //Displays Dark grey on the other tiles
                }

                frame.add(squares[cordX][cordY]);

                // If the user is playing as black

                isUserPlayingWhite = false;

                //Ai's side
                if (cordX == 0 && cordY == 0 || cordX == 0 && cordY == 7) {
                    squares[cordX][cordY].setIcon(WhiteRook);
                }

                if (cordX == 0 && cordY == 1 || cordX == 0 && cordY == 6) {
                    squares[cordX][cordY].setIcon(WhiteKnight);
                }

                if (cordX == 0 && cordY == 2 || cordX == 0 && cordY == 5) {
                    squares[cordX][cordY].setIcon(WhiteBishop);
                }

                if (cordX == 0 && cordY == 3) {
                    squares[cordX][cordY].setIcon(WhiteKing);
                }

                if (cordX == 0 && cordY == 4) {
                    squares[cordX][cordY].setIcon(WhiteQueen);
                }

                for (int whitePawn = 0; whitePawn < 8; whitePawn++) {
                    if (cordX == 1 && cordY == whitePawn) {
                        squares[1][whitePawn].setIcon(WhitePawn);
                    }
                }


                //User's side

                if (cordX == 7 && cordY == 0 || cordX == 7 && cordY == 7) {
                    squares[cordX][cordY].setIcon(BlackRook);
                }

                if (cordX == 7 && cordY == 3) {
                    squares[7][3].setIcon(BlackKing);
                }

                if (cordX == 7 && cordY == 1 || cordX == 7 && cordY == 6) {
                    squares[cordX][cordY].setIcon(BlackKnight);
                }

                if (cordX == 7 && cordY == 2 || cordX == 7 && cordY == 5) {
                    squares[cordX][cordY].setIcon(BlackBishop);
                }

                if (cordX == 7 && cordY == 4) {
                    squares[cordX][cordY].setIcon(BlackQueen);
                }

                for (int blackPawn = 0; blackPawn < 8; blackPawn++) {
                    if (cordX == 6 && cordY == blackPawn) {
                        squares[6][blackPawn].setIcon(BlackPawn);
                    }
                }


            }

            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //Allows program to be closed if the user press exit
            frame.setVisible(true);
        } //Sets the program visible


    }



    public void uWhiteSide() { //Flips the board around so that the user is playing white - AI can play black
        isUserPlayingWhite = true;

        for (int cordX = 0; cordX < 8; cordX++) {
            for (int cordY = 0; cordY < 8; cordY++) {
                if (squares[cordX][cordY].getIcon() == BlackKing) {
                    squares[cordX][cordY].setIcon(WhiteQueen);
                } else if (squares[cordX][cordY].getIcon() == BlackQueen) {
                    squares[cordX][cordY].setIcon(WhiteKing);
                } else if (squares[cordX][cordY].getIcon() == BlackPawn) {
                    squares[cordX][cordY].setIcon(WhitePawn);
                } else if (squares[cordX][cordY].getIcon() == BlackBishop) {
                    squares[cordX][cordY].setIcon(WhiteBishop);
                } else if (squares[cordX][cordY].getIcon() == BlackRook) {
                    squares[cordX][cordY].setIcon(WhiteRook);
                } else if (squares[cordX][cordY].getIcon() == BlackKnight) {
                    squares[cordX][cordY].setIcon(WhiteKnight);
                } else if (squares[cordX][cordY].getIcon() == WhiteKing) {
                    squares[cordX][cordY].setIcon(BlackQueen);
                } else if (squares[cordX][cordY].getIcon() == WhiteQueen) {
                    squares[cordX][cordY].setIcon(BlackKing);
                } else if (squares[cordX][cordY].getIcon() == WhitePawn) {
                    squares[cordX][cordY].setIcon(BlackPawn);
                } else if (squares[cordX][cordY].getIcon() == WhiteBishop) {
                    squares[cordX][cordY].setIcon(BlackBishop);
                } else if (squares[cordX][cordY].getIcon() == WhiteRook) {
                    squares[cordX][cordY].setIcon(BlackRook);
                } else if (squares[cordX][cordY].getIcon() == WhiteKnight) {
                    squares[cordX][cordY].setIcon(BlackKnight);
                }
            }
        }


        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //Allows program to be closed if the user press exit
        frame.setVisible(true);
    }

    @Override
    public void mousePressed(MouseEvent e) { //Method for when the mouse is pressed

        JButton button = (JButton) e.getSource();
        int x = -1;
        int y = -1;

        // Find the coordinates of the button that was clicked
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (button == squares[i][j]) { //Checks if the button is the same button as the one that was clicked
                    x = i;
                    y = j;
                    break; //Breaks out of the loop if the button is found
                }
            }
            if (x != -1 && y != -1) { // checks if the x and y values have been updated with a valid button coordinate.
                break; // If they have, then the loops are broken out of using the break statement.
            }
        }

        }


@Override
    public void mouseReleased(MouseEvent e) { //When the user releases the mouse
    JButton source = (JButton) e.getSource(); //Gets the source of the button that was clicked
    ImageIcon piece = (ImageIcon) source.getIcon(); //Gets the icon of the piece that was clicked

        if (piece != null) { //If there is a piece
            // Save the current location of the piece
            int fromX = -1; //Save current location of the piece
            int fromY = -1;
            for (int i = 0; i < 8; i++) { //Loop through the board
                for (int j = 0; j < 8; j++) {
                    if (source == squares[i][j]) { //If current square is the same as the square that was clicked
                        fromX = i;
                        fromY = j;
                        break;
                    }
                }
                if (fromX != -1 && fromY != -1) { //If piece has been found, break out of loop
                    break;
                }
            }

            int fromPos = fromX *8 + fromY; //Calculate piece current position

            // Determine the new location where the user wants to move the piece
            JButton destination = (JButton) e.getComponent();
            int toX = -1, toY = -1;
            for (int i = 0; i < 8; i++) { //Loop through all squares on board
                for (int j = 0; j < 8; j++) {
                    if (destination == squares[i][j]) { //If destination location has been found, break out of loop
                        toX = i;
                        toY = j;
                        break;
                    }
                }
                if (toX != -1 && toY != -1) {
                    break;
                }
            }

            int toPos = toX *8 + toY; //Calculate the piece new location


            if (piece == WhitePawn) { //If piece is a white pawn
                Piece piece1 = positions[fromX][fromY]; //Get piece at current location
                System.out.println("White Pawn");

                if (piece1.legalMoves.contains(toPos - fromPos)) { //Check if pawn legal move contains the difference between the current position and the old position
                    //Move the piece
                    squares[fromX][fromY].setIcon(null); //Move icon on source and destination button
                    squares[toX][toY].setIcon(WhitePawn);
                    positions [fromX][fromY] = null; //Set current position to null
                    positions[toX][toY] = piece1; //Set new position to piece
                }
            }

             else { //If not a white pawn

                if (piece.legalMoves.contains(toPos - fromPos)) { //Check if the piece legal moves contain difference from current position to new position to old position
                     //Move the piece
                    squares[fromX][fromY].setIcon(null);
                    squares[toX][toY].setIcon(piece);}
             else {
                    // Reset the piece to its original location
                    squares[fromX][fromY].setIcon(piece);
                    squares[toX][toY].setIcon(null);
                }
            }
        }
}

    public void mouseEntered(MouseEvent e) {}
    public void mouseExited(MouseEvent e) {}


    public void mouseClicked(MouseEvent e) { //To find the button that was clicked

        JButton button = (JButton) e.getSource();
        int x = -1; //Initialising the coordinates
        int y = -1;
        for (int i = 0; i < 8; i++) { //For loops to loop through all tiles
            for (int j = 0; j < 8; j++) {
                if (button == squares[i][j]) { //If the button that was clicked is equal to the button in the array, record x and y coords and leave the loop
                    x = i;
                    y = j;
                    break;
                }
            }
            if (x != -1 && y != -1) { //If the x and y coords are not equal to -1, leave the loop
                break;
            }

        }

        System.out.println("Button at (" + x + ", " + y + ")" + "" + squares[x][y].getIcon()); //Prints x and y as well as the piece
    }

    public static void main(String[] args) {


        }
}
