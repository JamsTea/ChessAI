import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

public class MainMenu extends JFrame{
    private JComboBox userDifficulty;
    private JComboBox userSide;
    private JButton startButton;
    private JPanel mainMenu;

    public MainMenu() {
        startButton.addActionListener(new ActionListener() { //Action is made once the button is pressed
            @Override
            public void actionPerformed(ActionEvent e) {
                String _userDifficulty = (String) userDifficulty.getSelectedItem(); //Variable to store the difficulty that the user selected
                String _userSide = (String) userSide.getSelectedItem(); //Variable to store the side that the user selected

                if(_userSide == "White"){
                    if(_userDifficulty == "Easy"){
                        AIEasy ai = new AIEasy();
                        ChessBoardG chessBoardG = new ChessBoardG(ai);
                        ai.makeBlackMove(chessBoardG, true, true);
                        chessBoardG.uWhiteSide();
                    }
                }

                if (_userSide=="Black"){
                    if(_userDifficulty == "Easy"){
                        AIEasy ai = new AIEasy();
                        ChessBoardG chessBoardG = new ChessBoardG(ai);
                        ai.makeWhiteMove(chessBoardG, true, true);

                    }
                }

                if (_userSide=="Random"){
                    Random rand = new Random();
                    int upperBound =2; //Upperbound will be 1, allows random to select either 0 or 1
                    int intRandom =rand.nextInt(upperBound);

                    if (intRandom==0){
                        AIEasy ai = new AIEasy();
                        ChessBoardG chessBoardG = new ChessBoardG(ai);
                        ai.makeBlackMove(chessBoardG, true, true);
                        chessBoardG.uWhiteSide();
                    }
                    else {
                        AIEasy ai = new AIEasy();
                        ChessBoardG chessBoardG = new ChessBoardG(ai);
                        ai.makeWhiteMove(chessBoardG, true, true);
                    }
                }
            }
        });

        // Create a new window for the surrender button
        JFrame surrenderFrame = new JFrame("Surrender");
        surrenderFrame.setSize(150, 150);
        surrenderFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        surrenderFrame.setLocationRelativeTo(null); // Center the frame
        surrenderFrame.setVisible(true);

        // Create the surrender button and add it to the surrenderFrame
        ImageIcon surrenderFlag = new ImageIcon("E:\\Coding projects\\NEA\\ChessAI\\Pieces\\surrender.png");
        JButton surrenderButton = new JButton(surrenderFlag);
        surrenderFrame.add(surrenderButton);

        surrenderButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(null, "Game Over, lost by forfeit");
                System.exit(0); //Closes the game
            }
        });

    }

    public static void main(String[] args) {
        MainMenu h= new MainMenu();
        h.setContentPane(h.mainMenu);
        h.setTitle("ChessAI");
        h.setSize(300,400 );
        h.setVisible(true);
        h.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
}
