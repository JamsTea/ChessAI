public abstract class ChessTile{
    private final int tileCoordinate; //Stores the coordinate of the tile

    public ChessTile(int tileCoordinate){ //constructor to initialise the tileCoordinate variable
        this.tileCoordinate=tileCoordinate;}

    public int getTileCoordinate(){ //Returns the tileCoordinate
        return tileCoordinate;}

    public abstract boolean isOccupied(); //Check if the tile is occupied
    public abstract Piece getPiece(); //Method to get the piece on a tile

    public static class EmptyTile extends ChessTile{ //Shows if there is an empty tile
        public EmptyTile(int tileCoordinate){ //Constructor to create an empty tile at a given tile coordinate
            super(tileCoordinate);}

        @Override
        public boolean isOccupied(){ //Method to check if the tile is occupied
            return false;} //Returns false since it's an empty tile

        @Override
        public Piece getPiece(){ //Method to get the piece on the tile
            return null;} //Returns null since it's an empty tile
    }

    public static class OccupiedTile extends ChessTile{ //Class to represent an occupied tile
        private final Piece piece; //Variable to store the piece on the tile

        public OccupiedTile(int tileCoordinate, Piece piece){ //Constructor to create an occupied tile with the given piece and coordinate
            super(tileCoordinate);
            this.piece = piece;}

        @Override
       public boolean isOccupied(){ //Method to check if the tile is occupied
            return true;} //Returns true since it's an occupied tile
        @Override
        public Piece getPiece(){ //Method to get the piece on the tile
            return piece;}

    }
}

