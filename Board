import javax.swing.*;
import java.awt.*;
import java.util.List;

public class Board {
    private JFrame frame;

    Board board = new Board();
    Pawn pawn = new Pawn(0, Color.WHITE, board);


    //Numerical value for each piece. Will be used to help decide whether the piece is the opposition or not
    public final int empty = 0;
    public final int whitePawn = 1;
    public final int whiteKnight =2;
    public final int whiteBishop =3;
    public final int whiteRook = 4;
    public final int whiteQueen = 5;
    public final int whiteKing = 6;
    public final int blackPawn = -1;
    public final int blackKnight =-2;
    public final int blackBishop =-3;
    public final int blackRook = -4;
    public final int blackQueen =-5;
    public final int blackKing =-6;


    public JButton getButton(int x, int y) {
        Component[] components = frame.getContentPane().getComponents(); // get all the components in the content pane
        for (Component component : components) {
            if (component instanceof JButton) { // check if the component is a JButton
                JButton button = (JButton) component;
                int buttonX = (int) button.getClientProperty("x"); // get the x coordinate of the button from its client property
                int buttonY = (int) button.getClientProperty("y"); // get the y coordinate of the button from its client property
                if (buttonX == x && buttonY == y) { // if the button's x and y coordinates match the given x and y coordinates, return the button
                    return button;
                }
            }
        }
        return null; // return null if no matching button is found
    }





    public void updateGUI() {
        for (int x = 0; x < 8; x++) {
            for (int y = 0; y < 8; y++) {
                JButton button = getButton(x, y); // get the JButton for the given x and y coordinates
                Piece piece = getPosition(x, y); // get the piece at the given x and y coordinates
                if (piece == null) {
                    button.setIcon(null); // set the button icon to null if there's no piece at the given x and y coordinates
                } else {
                    ImageIcon icon = new ImageIcon(piece.getImage());  // in piece class getImage// create a new ImageIcon using the piece's image
                    button.setIcon(icon); // set the button icon to the new ImageIcon
                }
            }
        }
    }




    private Piece [][] positions; //2D Array called Positions

    public Board() {
        positions = new Piece[8][8];} //Initialised array 8 x 8 (size of chess board)

    public void setPiece (Piece piece, int x, int y){ //Set method for the positions for x and y co-ords
        positions [x][y] = piece;}

    public Piece getPosition (int x , int y){ //Get method to return the position at x and y co-ords
        return positions [x][y];}


    /*
    public boolean canTakePiece(int x, int y){ //Boolean function which will return true if the piece attacking is an enemy piece or not
        Piece piece = positions [x][y];
        if (piece == null){
            return false;}

        if (isUserPlayingWhite){
            if(piece.getPosition() == blackPawn || piece.getPosition() == blackKnight || piece.getPosition() ==blackBishop || piece.getPosition() == blackRook
                    || piece.getPosition()==blackQueen || piece.getPosition() == blackKing ){
                return true;}
        }

        if (!isUserPlayingWhite ){
            if(piece.getPosition() == whitePawn || piece.getPosition() == whiteKnight || piece.getPosition() == whiteBishop || piece.getPosition()==whiteRook
                    || piece.getPosition()==whiteQueen || piece.getPosition()==whiteKing){
                return true;}
        }
        return false;

    }



     */

}
